generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id            String         @id @default(cuid())
  street        String
  number        String
  complement    String?
  neighborhood  String
  city          String
  state         String
  zip           String
  type          AddressType    @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  installations Installation[]
  users         User[]
  distributors  Distributor[]
}

model Contact {
  id           String        @id @unique @default(cuid())
  phones       String[]
  emails       String[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  users        User[]
  distributors Distributor[]
}

model User {
  id                 String             @id @default(cuid())
  name               String?
  email              String             @unique
  password           String
  role               Role
  addressId          String?
  contactId          String?
  documentId         String?
  emailVerified      Boolean            @default(true)
  isTwoFactorEnabled Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  profileCompleted   Boolean            @default(true)
  adminHelpRequests  HelpRequest[]      @relation("AdminHelpRequests")
  helpRequests       HelpRequest[]      @relation("UserHelpRequests")
  helpResponses      HelpResponse[]
  installations      Installation[]
  invitations        Invitation[]       @relation("InvitationSenders")
  notifications      Notification[]
  passwordResets     PasswordReset[]
  address            Address?           @relation(fields: [addressId], references: [id])
  contact            Contact?           @relation(fields: [contactId], references: [id])
  document           Document?          @relation(fields: [documentId], references: [id])
  verificationCodes  VerificationCode[]
  invoices           Invoice[]
}

model Invitation {
  id        String           @id @default(cuid())
  email     String
  name      String?
  role      Role
  token     String           @unique
  message   String?
  status    InvitationStatus @default(PENDING)
  senderId  String?
  createdAt DateTime         @default(now())
  expiresAt DateTime
  sender    User?            @relation("InvitationSenders", fields: [senderId], references: [id])
}

model HelpRequest {
  id        String            @id @default(cuid())
  title     String
  message   String
  status    HelpRequestStatus @default(OPEN)
  userId    String
  adminId   String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  admin     User?             @relation("AdminHelpRequests", fields: [adminId], references: [id])
  user      User              @relation("UserHelpRequests", fields: [userId], references: [id])
  responses HelpResponse[]
}

model HelpResponse {
  id            String      @id @default(cuid())
  message       String
  helpRequestId String
  userId        String
  createdAt     DateTime    @default(now())
  helpRequest   HelpRequest @relation(fields: [helpRequestId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

model Notification {
  id        String             @id @default(cuid())
  title     String
  message   String
  type      NotificationType   @default(SYSTEM)
  status    NotificationStatus @default(UNREAD)
  userId    String
  relatedId String?
  readAt    DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id])
}

model Installation {
  id                 String                @id @default(cuid())
  installationNumber String
  type               InstallationType
  distributorId      String
  ownerId            String?
  addressId          String
  status             InstallationStatus    @default(ACTIVE)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  cemigEnergyBills   CemigEnergyBillData[] @relation("CemigBillsForInstallation")
  address            Address               @relation(fields: [addressId], references: [id])
  distributor        Distributor           @relation(fields: [distributorId], references: [id])
  owner              User?                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  asConsumerCredits  EnergyCredit[]        @relation("ConsumerCredits")
  asGeneratorCredits EnergyCredit[]        @relation("GeneratorCredits")
  asConsumerQuotas   InstallationQuota[]   @relation("ConsumerQuotas")
  asGeneratorQuotas  InstallationQuota[]   @relation("GeneratorQuotas")
  invoices           Invoice[]

  @@unique([installationNumber, distributorId])
  @@index([ownerId])
  @@index([distributorId])
  @@index([addressId])
}

model CemigEnergyBillData {
  id                    String                @id @default(cuid())
  uploadBatchId         String
  installationId        String
  period                String
  modality              String?
  quota                 Float?
  tariffPost            String?
  previousBalance       Float?
  expiredBalance        Float?
  consumption           Float?
  generation            Float?
  compensation          Float?
  transferred           Float?
  received              Float?
  currentBalance        Float?
  expiringBalanceAmount Float?
  expiringBalancePeriod String?
  dataSource            String?
  uploadTimestamp       DateTime              @default(now())
  installation          Installation          @relation("CemigBillsForInstallation", fields: [installationId], references: [id], onDelete: Cascade)
  uploadBatch           EnergyDataUploadBatch @relation(fields: [uploadBatchId], references: [id])

  @@unique([installationId, period])
  @@index([uploadBatchId])
}

model PasswordReset {
  id        String    @id @default(cuid())
  token     String    @unique
  userId    String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@index([token])
  @@index([userId])
}

model VerificationCode {
  id        String           @id @default(cuid())
  code      String
  userId    String
  type      VerificationType
  used      Boolean          @default(false)
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([code])
}

model InstallationQuota {
  id          String       @id @default(cuid())
  generatorId String       @map("generator_id")
  consumerId  String       @map("consumer_id")
  percentage  Int
  startDate   DateTime     @map("start_date") @db.Timestamp(6)
  endDate     DateTime?    @map("end_date") @db.Timestamp(6)
  createdAt   DateTime?    @default(now()) @map("created_at") @db.Timestamp(6)
  consumer    Installation @relation("ConsumerQuotas", fields: [consumerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  generator   Installation @relation("GeneratorQuotas", fields: [generatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("installation_quotas")
}

model KwhPrice {
  id            String      @id @default(cuid())
  price         Int
  distributorId String      @map("distributor_id")
  startDate     DateTime    @map("start_date") @db.Timestamp(6)
  endDate       DateTime?   @map("end_date") @db.Timestamp(6)
  createdAt     DateTime?   @default(now()) @map("created_at") @db.Timestamp(6)
  distributor   Distributor @relation(fields: [distributorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("kwh_prices")
}

model Distributor {
  id            String                  @id @default(cuid())
  name          String                  @unique
  code          String                  @unique(map: "distributors_code_unique")
  state         String
  addressId     String
  contactId     String?
  createdAt     DateTime?               @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime?               @default(now()) @map("updated_at") @db.Timestamp(6)
  installations Installation[]
  address       Address                 @relation(fields: [addressId], references: [id])
  contact       Contact?                @relation(fields: [contactId], references: [id])
  uploadBatches EnergyDataUploadBatch[]
  kwhPrices     KwhPrice[]

  @@map("distributors")
}

model EnergyCredit {
  id                 String       @id @default(cuid())
  generatorId        String       @map("generator_id")
  consumerId         String       @map("consumer_id")
  referenceMonth     String       @map("reference_month")
  generatedAmount    Int          @map("generated_amount")
  transferredAmount  Int          @map("transferred_amount")
  receivedAmount     Int          @map("received_amount")
  consumptionAmount  Int          @map("consumption_amount")
  compensationAmount Int          @map("compensation_amount")
  balanceAmount      Int          @map("balance_amount")
  expirationDate     DateTime     @map("expiration_date") @db.Timestamp(6)
  status             String       @default("active")
  createdAt          DateTime?    @default(now()) @map("created_at") @db.Timestamp(6)
  consumer           Installation @relation("ConsumerCredits", fields: [consumerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  generator          Installation @relation("GeneratorCredits", fields: [generatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("energy_credits")
}

model Invoice {
  id                    String       @id @default(cuid())
  user_id               String
  reference_month       String
  total_amount          Int
  invoice_amount        Int?
  savings               Int?
  savings_percentage    Float?
  discount_percentage   Float?
  due_date              DateTime     @db.Timestamp(6)
  status                String       @default("pending")
  paid_at               DateTime?    @db.Timestamp(6)
  billing_address       String
  installation_id       String
  customer_id           String?
  invoice_number        String?
  created_at            DateTime?    @default(now()) @db.Timestamp(6)
  last_email_sent_at    DateTime?    @db.Timestamp(6)
  last_whatsapp_sent_at DateTime?    @db.Timestamp(6)
  pdf_generated_at      DateTime?    @db.Timestamp(6)
  Installation          Installation @relation(fields: [installation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User                  User         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("invoices")
}

model AppSettings {
  id              String   @id @default(cuid())
  key             String   @unique
  value           String
  description     String?
  type            String
  category        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdById     String?
  lastUpdatedById String?

  @@index([category])
  @@index([key])
}

model Document {
  id            String   @id @default(cuid())
  cpf           String?  @unique
  cnpj          String?  @unique
  rg            String?
  issuingEntity String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  users         User[]
}

model EnergyDataUploadBatch {
  id             String                @id @default(cuid())
  fileName       String
  distributorId  String
  status         String                @default("success")
  totalCount     Int                   @default(0)
  processedCount Int                   @default(0)
  errorCount     Int                   @default(0)
  notFoundCount  Int                   @default(0)
  processingType String                @default("cemig")
  createdAt      DateTime              @default(now())
  completedAt    DateTime?
  energyBillData CemigEnergyBillData[]
  distributor    Distributor           @relation(fields: [distributorId], references: [id])

  @@index([distributorId])
  @@map("energy_data_upload_batches")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  ADMIN_STAFF
  CUSTOMER
  ENERGY_RENTER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REVOKED
  EXPIRED
}

enum InstallationType {
  GENERATOR
  CONSUMER
}

enum AddressType {
  USER
  INSTALLATION
  DISTRIBUTOR
}

enum NotificationType {
  SYSTEM
  HELP
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum HelpRequestStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum VerificationType {
  EMAIL_VERIFICATION
  LOGIN
}

enum InstallationStatus {
  ACTIVE
  INACTIVE
}
